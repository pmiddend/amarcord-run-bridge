# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from amarcord_open.models.json_analysis_run import JsonAnalysisRun
from amarcord_open.models.json_attributo import JsonAttributo
from amarcord_open.models.json_chemical import JsonChemical
from amarcord_open.models.json_run_analysis_indexing_result import JsonRunAnalysisIndexingResult
from amarcord_open.models.json_run_id import JsonRunId
from typing import Optional, Set
from typing_extensions import Self

class JsonReadRunAnalysis(BaseModel):
    """
    JsonReadRunAnalysis
    """ # noqa: E501
    chemicals: List[JsonChemical]
    attributi: List[JsonAttributo]
    run: Optional[JsonAnalysisRun] = None
    run_ids: List[JsonRunId]
    indexing_results: List[JsonRunAnalysisIndexingResult]
    __properties: ClassVar[List[str]] = ["chemicals", "attributi", "run", "run_ids", "indexing_results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonReadRunAnalysis from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in chemicals (list)
        _items = []
        if self.chemicals:
            for _item_chemicals in self.chemicals:
                if _item_chemicals:
                    _items.append(_item_chemicals.to_dict())
            _dict['chemicals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attributi (list)
        _items = []
        if self.attributi:
            for _item_attributi in self.attributi:
                if _item_attributi:
                    _items.append(_item_attributi.to_dict())
            _dict['attributi'] = _items
        # override the default output from pydantic by calling `to_dict()` of run
        if self.run:
            _dict['run'] = self.run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in run_ids (list)
        _items = []
        if self.run_ids:
            for _item_run_ids in self.run_ids:
                if _item_run_ids:
                    _items.append(_item_run_ids.to_dict())
            _dict['run_ids'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in indexing_results (list)
        _items = []
        if self.indexing_results:
            for _item_indexing_results in self.indexing_results:
                if _item_indexing_results:
                    _items.append(_item_indexing_results.to_dict())
            _dict['indexing_results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonReadRunAnalysis from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chemicals": [JsonChemical.from_dict(_item) for _item in obj["chemicals"]] if obj.get("chemicals") is not None else None,
            "attributi": [JsonAttributo.from_dict(_item) for _item in obj["attributi"]] if obj.get("attributi") is not None else None,
            "run": JsonAnalysisRun.from_dict(obj["run"]) if obj.get("run") is not None else None,
            "run_ids": [JsonRunId.from_dict(_item) for _item in obj["run_ids"]] if obj.get("run_ids") is not None else None,
            "indexing_results": [JsonRunAnalysisIndexingResult.from_dict(_item) for _item in obj["indexing_results"]] if obj.get("indexing_results") is not None else None
        })
        return _obj


