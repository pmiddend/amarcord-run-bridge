# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class JsonMergeResultShell(BaseModel):
    """
    JsonMergeResultShell
    """ # noqa: E501
    one_over_d_centre: Union[StrictFloat, StrictInt]
    nref: StrictInt
    d_over_a: Union[StrictFloat, StrictInt]
    min_res: Union[StrictFloat, StrictInt]
    max_res: Union[StrictFloat, StrictInt]
    cc: Union[StrictFloat, StrictInt]
    ccstar: Union[StrictFloat, StrictInt]
    r_split: Union[StrictFloat, StrictInt]
    reflections_possible: StrictInt
    completeness: Union[StrictFloat, StrictInt]
    measurements: StrictInt
    redundancy: Union[StrictFloat, StrictInt]
    snr: Union[StrictFloat, StrictInt]
    mean_i: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["one_over_d_centre", "nref", "d_over_a", "min_res", "max_res", "cc", "ccstar", "r_split", "reflections_possible", "completeness", "measurements", "redundancy", "snr", "mean_i"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonMergeResultShell from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonMergeResultShell from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "one_over_d_centre": obj.get("one_over_d_centre"),
            "nref": obj.get("nref"),
            "d_over_a": obj.get("d_over_a"),
            "min_res": obj.get("min_res"),
            "max_res": obj.get("max_res"),
            "cc": obj.get("cc"),
            "ccstar": obj.get("ccstar"),
            "r_split": obj.get("r_split"),
            "reflections_possible": obj.get("reflections_possible"),
            "completeness": obj.get("completeness"),
            "measurements": obj.get("measurements"),
            "redundancy": obj.get("redundancy"),
            "snr": obj.get("snr"),
            "mean_i": obj.get("mean_i")
        })
        return _obj


