# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from amarcord_open.models.json_attributo import JsonAttributo
from amarcord_open.models.json_chemical import JsonChemical
from amarcord_open.models.json_data_set_with_fom import JsonDataSetWithFom
from amarcord_open.models.json_event import JsonEvent
from amarcord_open.models.json_experiment_type import JsonExperimentType
from amarcord_open.models.json_live_stream import JsonLiveStream
from amarcord_open.models.json_run import JsonRun
from amarcord_open.models.json_run_analysis_indexing_result import JsonRunAnalysisIndexingResult
from amarcord_open.models.json_user_config import JsonUserConfig
from typing import Optional, Set
from typing_extensions import Self

class JsonReadRunsOverview(BaseModel):
    """
    JsonReadRunsOverview
    """ # noqa: E501
    live_stream: Optional[JsonLiveStream] = None
    attributi: List[JsonAttributo]
    latest_indexing_result: Optional[JsonRunAnalysisIndexingResult] = None
    latest_run: Optional[JsonRun] = None
    foms_for_this_data_set: Optional[JsonDataSetWithFom] = None
    experiment_types: List[JsonExperimentType]
    events: List[JsonEvent]
    chemicals: List[JsonChemical]
    user_config: JsonUserConfig
    current_beamtime_user: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["live_stream", "attributi", "latest_indexing_result", "latest_run", "foms_for_this_data_set", "experiment_types", "events", "chemicals", "user_config", "current_beamtime_user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonReadRunsOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of live_stream
        if self.live_stream:
            _dict['live_stream'] = self.live_stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attributi (list)
        _items = []
        if self.attributi:
            for _item_attributi in self.attributi:
                if _item_attributi:
                    _items.append(_item_attributi.to_dict())
            _dict['attributi'] = _items
        # override the default output from pydantic by calling `to_dict()` of latest_indexing_result
        if self.latest_indexing_result:
            _dict['latest_indexing_result'] = self.latest_indexing_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_run
        if self.latest_run:
            _dict['latest_run'] = self.latest_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of foms_for_this_data_set
        if self.foms_for_this_data_set:
            _dict['foms_for_this_data_set'] = self.foms_for_this_data_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in experiment_types (list)
        _items = []
        if self.experiment_types:
            for _item_experiment_types in self.experiment_types:
                if _item_experiment_types:
                    _items.append(_item_experiment_types.to_dict())
            _dict['experiment_types'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in chemicals (list)
        _items = []
        if self.chemicals:
            for _item_chemicals in self.chemicals:
                if _item_chemicals:
                    _items.append(_item_chemicals.to_dict())
            _dict['chemicals'] = _items
        # override the default output from pydantic by calling `to_dict()` of user_config
        if self.user_config:
            _dict['user_config'] = self.user_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonReadRunsOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "live_stream": JsonLiveStream.from_dict(obj["live_stream"]) if obj.get("live_stream") is not None else None,
            "attributi": [JsonAttributo.from_dict(_item) for _item in obj["attributi"]] if obj.get("attributi") is not None else None,
            "latest_indexing_result": JsonRunAnalysisIndexingResult.from_dict(obj["latest_indexing_result"]) if obj.get("latest_indexing_result") is not None else None,
            "latest_run": JsonRun.from_dict(obj["latest_run"]) if obj.get("latest_run") is not None else None,
            "foms_for_this_data_set": JsonDataSetWithFom.from_dict(obj["foms_for_this_data_set"]) if obj.get("foms_for_this_data_set") is not None else None,
            "experiment_types": [JsonExperimentType.from_dict(_item) for _item in obj["experiment_types"]] if obj.get("experiment_types") is not None else None,
            "events": [JsonEvent.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "chemicals": [JsonChemical.from_dict(_item) for _item in obj["chemicals"]] if obj.get("chemicals") is not None else None,
            "user_config": JsonUserConfig.from_dict(obj["user_config"]) if obj.get("user_config") is not None else None,
            "current_beamtime_user": obj.get("current_beamtime_user")
        })
        return _obj


