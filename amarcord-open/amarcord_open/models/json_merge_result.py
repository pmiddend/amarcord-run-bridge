# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from amarcord_open.models.json_merge_parameters import JsonMergeParameters
from amarcord_open.models.json_merge_result_state_done import JsonMergeResultStateDone
from amarcord_open.models.json_merge_result_state_error import JsonMergeResultStateError
from amarcord_open.models.json_merge_result_state_queued import JsonMergeResultStateQueued
from amarcord_open.models.json_merge_result_state_running import JsonMergeResultStateRunning
from amarcord_open.models.json_refinement_result import JsonRefinementResult
from typing import Optional, Set
from typing_extensions import Self

class JsonMergeResult(BaseModel):
    """
    JsonMergeResult
    """ # noqa: E501
    id: StrictInt
    created: StrictInt
    runs: List[StrictStr]
    indexing_result_ids: List[StrictInt]
    state_queued: Optional[JsonMergeResultStateQueued] = None
    state_error: Optional[JsonMergeResultStateError] = None
    state_running: Optional[JsonMergeResultStateRunning] = None
    state_done: Optional[JsonMergeResultStateDone] = None
    parameters: JsonMergeParameters
    refinement_results: List[JsonRefinementResult]
    __properties: ClassVar[List[str]] = ["id", "created", "runs", "indexing_result_ids", "state_queued", "state_error", "state_running", "state_done", "parameters", "refinement_results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonMergeResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of state_queued
        if self.state_queued:
            _dict['state_queued'] = self.state_queued.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_error
        if self.state_error:
            _dict['state_error'] = self.state_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_running
        if self.state_running:
            _dict['state_running'] = self.state_running.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_done
        if self.state_done:
            _dict['state_done'] = self.state_done.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in refinement_results (list)
        _items = []
        if self.refinement_results:
            for _item_refinement_results in self.refinement_results:
                if _item_refinement_results:
                    _items.append(_item_refinement_results.to_dict())
            _dict['refinement_results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonMergeResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created": obj.get("created"),
            "runs": obj.get("runs"),
            "indexing_result_ids": obj.get("indexing_result_ids"),
            "state_queued": JsonMergeResultStateQueued.from_dict(obj["state_queued"]) if obj.get("state_queued") is not None else None,
            "state_error": JsonMergeResultStateError.from_dict(obj["state_error"]) if obj.get("state_error") is not None else None,
            "state_running": JsonMergeResultStateRunning.from_dict(obj["state_running"]) if obj.get("state_running") is not None else None,
            "state_done": JsonMergeResultStateDone.from_dict(obj["state_done"]) if obj.get("state_done") is not None else None,
            "parameters": JsonMergeParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "refinement_results": [JsonRefinementResult.from_dict(_item) for _item in obj["refinement_results"]] if obj.get("refinement_results") is not None else None
        })
        return _obj


