# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from amarcord_open.models.db_job_status import DBJobStatus
from amarcord_open.models.json_beamtime import JsonBeamtime
from typing import Optional, Set
from typing_extensions import Self

class JsonIndexingJob(BaseModel):
    """
    JsonIndexingJob
    """ # noqa: E501
    id: StrictInt
    job_id: Optional[StrictInt] = None
    job_status: DBJobStatus
    started: Optional[StrictInt] = None
    stopped: Optional[StrictInt] = None
    is_online: StrictBool
    stream_file: Optional[StrictStr] = None
    source: StrictStr
    cell_description: Optional[StrictStr] = None
    geometry_file_input: StrictStr
    geometry_file_output: StrictStr
    command_line: StrictStr
    run_internal_id: StrictInt
    run_external_id: StrictInt
    beamtime: JsonBeamtime
    input_file_globs: List[StrictStr]
    __properties: ClassVar[List[str]] = ["id", "job_id", "job_status", "started", "stopped", "is_online", "stream_file", "source", "cell_description", "geometry_file_input", "geometry_file_output", "command_line", "run_internal_id", "run_external_id", "beamtime", "input_file_globs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonIndexingJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of beamtime
        if self.beamtime:
            _dict['beamtime'] = self.beamtime.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonIndexingJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "job_id": obj.get("job_id"),
            "job_status": obj.get("job_status"),
            "started": obj.get("started"),
            "stopped": obj.get("stopped"),
            "is_online": obj.get("is_online"),
            "stream_file": obj.get("stream_file"),
            "source": obj.get("source"),
            "cell_description": obj.get("cell_description"),
            "geometry_file_input": obj.get("geometry_file_input"),
            "geometry_file_output": obj.get("geometry_file_output"),
            "command_line": obj.get("command_line"),
            "run_internal_id": obj.get("run_internal_id"),
            "run_external_id": obj.get("run_external_id"),
            "beamtime": JsonBeamtime.from_dict(obj["beamtime"]) if obj.get("beamtime") is not None else None,
            "input_file_globs": obj.get("input_file_globs")
        })
        return _obj


