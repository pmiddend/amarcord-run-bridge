# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from amarcord_open.models.json_attributo_value import JsonAttributoValue
from amarcord_open.models.json_indexing_fom import JsonIndexingFom
from amarcord_open.models.json_run_file import JsonRunFile
from typing import Optional, Set
from typing_extensions import Self

class JsonRun(BaseModel):
    """
    JsonRun
    """ # noqa: E501
    id: StrictInt
    external_id: StrictInt
    attributi: List[JsonAttributoValue]
    started: StrictInt
    stopped: Optional[StrictInt] = None
    files: List[JsonRunFile]
    summary: JsonIndexingFom
    experiment_type_id: StrictInt
    __properties: ClassVar[List[str]] = ["id", "external_id", "attributi", "started", "stopped", "files", "summary", "experiment_type_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributi (list)
        _items = []
        if self.attributi:
            for _item_attributi in self.attributi:
                if _item_attributi:
                    _items.append(_item_attributi.to_dict())
            _dict['attributi'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "external_id": obj.get("external_id"),
            "attributi": [JsonAttributoValue.from_dict(_item) for _item in obj["attributi"]] if obj.get("attributi") is not None else None,
            "started": obj.get("started"),
            "stopped": obj.get("stopped"),
            "files": [JsonRunFile.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "summary": JsonIndexingFom.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "experiment_type_id": obj.get("experiment_type_id")
        })
        return _obj


