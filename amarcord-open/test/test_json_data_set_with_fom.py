# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.json_data_set_with_fom import JsonDataSetWithFom

class TestJsonDataSetWithFom(unittest.TestCase):
    """JsonDataSetWithFom unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JsonDataSetWithFom:
        """Test JsonDataSetWithFom
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JsonDataSetWithFom`
        """
        model = JsonDataSetWithFom()
        if include_optional:
            return JsonDataSetWithFom(
                data_set = openapi_client.models.json_data_set.JsonDataSet(
                    id = 56, 
                    experiment_type_id = 56, 
                    beamtime_id = 56, 
                    attributi = [
                        openapi_client.models.json_attributo_value.JsonAttributoValue(
                            attributo_id = 56, 
                            attributo_value_str = '', 
                            attributo_value_int = 56, 
                            attributo_value_chemical = 56, 
                            attributo_value_datetime = 56, 
                            attributo_value_float = 1.337, 
                            attributo_value_bool = True, 
                            attributo_value_list_str = [
                                ''
                                ], 
                            attributo_value_list_float = [
                                1.337
                                ], 
                            attributo_value_list_bool = [
                                True
                                ], )
                        ], ),
                fom = openapi_client.models.json_indexing_fom.JsonIndexingFom(
                    hit_rate = 1.337, 
                    indexing_rate = 1.337, 
                    indexed_frames = 56, 
                    detector_shift_x_mm = 1.337, 
                    detector_shift_y_mm = 1.337, )
            )
        else:
            return JsonDataSetWithFom(
                data_set = openapi_client.models.json_data_set.JsonDataSet(
                    id = 56, 
                    experiment_type_id = 56, 
                    beamtime_id = 56, 
                    attributi = [
                        openapi_client.models.json_attributo_value.JsonAttributoValue(
                            attributo_id = 56, 
                            attributo_value_str = '', 
                            attributo_value_int = 56, 
                            attributo_value_chemical = 56, 
                            attributo_value_datetime = 56, 
                            attributo_value_float = 1.337, 
                            attributo_value_bool = True, 
                            attributo_value_list_str = [
                                ''
                                ], 
                            attributo_value_list_float = [
                                1.337
                                ], 
                            attributo_value_list_bool = [
                                True
                                ], )
                        ], ),
                fom = openapi_client.models.json_indexing_fom.JsonIndexingFom(
                    hit_rate = 1.337, 
                    indexing_rate = 1.337, 
                    indexed_frames = 56, 
                    detector_shift_x_mm = 1.337, 
                    detector_shift_y_mm = 1.337, ),
        )
        """

    def testJsonDataSetWithFom(self):
        """Test JsonDataSetWithFom"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
