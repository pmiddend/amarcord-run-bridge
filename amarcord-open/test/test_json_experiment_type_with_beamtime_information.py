# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from amarcord_open.models.json_experiment_type_with_beamtime_information import JsonExperimentTypeWithBeamtimeInformation

class TestJsonExperimentTypeWithBeamtimeInformation(unittest.TestCase):
    """JsonExperimentTypeWithBeamtimeInformation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JsonExperimentTypeWithBeamtimeInformation:
        """Test JsonExperimentTypeWithBeamtimeInformation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JsonExperimentTypeWithBeamtimeInformation`
        """
        model = JsonExperimentTypeWithBeamtimeInformation()
        if include_optional:
            return JsonExperimentTypeWithBeamtimeInformation(
                experiment_type = amarcord_open.models.json_experiment_type.JsonExperimentType(
                    id = 56, 
                    name = '', 
                    attributi = [
                        amarcord_open.models.json_attributi_id_and_role.JsonAttributiIdAndRole(
                            id = 56, 
                            role = 'crystal', )
                        ], ),
                beamtime = amarcord_open.models.json_beamtime.JsonBeamtime(
                    id = 56, 
                    external_id = '', 
                    proposal = '', 
                    beamline = '', 
                    title = '', 
                    comment = '', 
                    start = 56, 
                    end = 56, 
                    chemical_names = [
                        ''
                        ], 
                    analysis_output_path = '', )
            )
        else:
            return JsonExperimentTypeWithBeamtimeInformation(
                experiment_type = amarcord_open.models.json_experiment_type.JsonExperimentType(
                    id = 56, 
                    name = '', 
                    attributi = [
                        amarcord_open.models.json_attributi_id_and_role.JsonAttributiIdAndRole(
                            id = 56, 
                            role = 'crystal', )
                        ], ),
                beamtime = amarcord_open.models.json_beamtime.JsonBeamtime(
                    id = 56, 
                    external_id = '', 
                    proposal = '', 
                    beamline = '', 
                    title = '', 
                    comment = '', 
                    start = 56, 
                    end = 56, 
                    chemical_names = [
                        ''
                        ], 
                    analysis_output_path = '', ),
        )
        """

    def testJsonExperimentTypeWithBeamtimeInformation(self):
        """Test JsonExperimentTypeWithBeamtimeInformation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
