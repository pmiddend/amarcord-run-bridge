# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.db_job_status import DBJobStatus
from openapi_client.models.json_file_output import JsonFileOutput
from openapi_client.models.json_indexing_job import JsonIndexingJob
from openapi_client.models.json_merge_parameters import JsonMergeParameters
from typing import Optional, Set
from typing_extensions import Self

class JsonMergeJob(BaseModel):
    """
    JsonMergeJob
    """ # noqa: E501
    id: StrictInt
    job_id: Optional[StrictInt] = None
    job_status: DBJobStatus
    parameters: JsonMergeParameters
    indexing_results: List[JsonIndexingJob]
    files_from_indexing: List[JsonFileOutput]
    point_group: StrictStr
    cell_description: StrictStr
    __properties: ClassVar[List[str]] = ["id", "job_id", "job_status", "parameters", "indexing_results", "files_from_indexing", "point_group", "cell_description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonMergeJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in indexing_results (list)
        _items = []
        if self.indexing_results:
            for _item_indexing_results in self.indexing_results:
                if _item_indexing_results:
                    _items.append(_item_indexing_results.to_dict())
            _dict['indexing_results'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files_from_indexing (list)
        _items = []
        if self.files_from_indexing:
            for _item_files_from_indexing in self.files_from_indexing:
                if _item_files_from_indexing:
                    _items.append(_item_files_from_indexing.to_dict())
            _dict['files_from_indexing'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonMergeJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "job_id": obj.get("job_id"),
            "job_status": obj.get("job_status"),
            "parameters": JsonMergeParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "indexing_results": [JsonIndexingJob.from_dict(_item) for _item in obj["indexing_results"]] if obj.get("indexing_results") is not None else None,
            "files_from_indexing": [JsonFileOutput.from_dict(_item) for _item in obj["files_from_indexing"]] if obj.get("files_from_indexing") is not None else None,
            "point_group": obj.get("point_group"),
            "cell_description": obj.get("cell_description")
        })
        return _obj


