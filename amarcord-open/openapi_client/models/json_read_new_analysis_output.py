# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from openapi_client.models.json_attributo import JsonAttributo
from openapi_client.models.json_attributo_value import JsonAttributoValue
from openapi_client.models.json_chemical_id_and_name import JsonChemicalIdAndName
from openapi_client.models.json_data_set import JsonDataSet
from openapi_client.models.json_data_set_statistics import JsonDataSetStatistics
from openapi_client.models.json_experiment_type_with_beamtime_information import JsonExperimentTypeWithBeamtimeInformation
from typing import Optional, Set
from typing_extensions import Self

class JsonReadNewAnalysisOutput(BaseModel):
    """
    JsonReadNewAnalysisOutput
    """ # noqa: E501
    searchable_attributi: List[JsonAttributo]
    attributi: List[JsonAttributo]
    chemical_id_to_name: List[JsonChemicalIdAndName]
    experiment_types: List[JsonExperimentTypeWithBeamtimeInformation]
    filtered_data_sets: List[JsonDataSet]
    data_set_statistics: List[JsonDataSetStatistics]
    attributi_values: List[JsonAttributoValue]
    __properties: ClassVar[List[str]] = ["searchable_attributi", "attributi", "chemical_id_to_name", "experiment_types", "filtered_data_sets", "data_set_statistics", "attributi_values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonReadNewAnalysisOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in searchable_attributi (list)
        _items = []
        if self.searchable_attributi:
            for _item_searchable_attributi in self.searchable_attributi:
                if _item_searchable_attributi:
                    _items.append(_item_searchable_attributi.to_dict())
            _dict['searchable_attributi'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attributi (list)
        _items = []
        if self.attributi:
            for _item_attributi in self.attributi:
                if _item_attributi:
                    _items.append(_item_attributi.to_dict())
            _dict['attributi'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in chemical_id_to_name (list)
        _items = []
        if self.chemical_id_to_name:
            for _item_chemical_id_to_name in self.chemical_id_to_name:
                if _item_chemical_id_to_name:
                    _items.append(_item_chemical_id_to_name.to_dict())
            _dict['chemical_id_to_name'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in experiment_types (list)
        _items = []
        if self.experiment_types:
            for _item_experiment_types in self.experiment_types:
                if _item_experiment_types:
                    _items.append(_item_experiment_types.to_dict())
            _dict['experiment_types'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filtered_data_sets (list)
        _items = []
        if self.filtered_data_sets:
            for _item_filtered_data_sets in self.filtered_data_sets:
                if _item_filtered_data_sets:
                    _items.append(_item_filtered_data_sets.to_dict())
            _dict['filtered_data_sets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_set_statistics (list)
        _items = []
        if self.data_set_statistics:
            for _item_data_set_statistics in self.data_set_statistics:
                if _item_data_set_statistics:
                    _items.append(_item_data_set_statistics.to_dict())
            _dict['data_set_statistics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attributi_values (list)
        _items = []
        if self.attributi_values:
            for _item_attributi_values in self.attributi_values:
                if _item_attributi_values:
                    _items.append(_item_attributi_values.to_dict())
            _dict['attributi_values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonReadNewAnalysisOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "searchable_attributi": [JsonAttributo.from_dict(_item) for _item in obj["searchable_attributi"]] if obj.get("searchable_attributi") is not None else None,
            "attributi": [JsonAttributo.from_dict(_item) for _item in obj["attributi"]] if obj.get("attributi") is not None else None,
            "chemical_id_to_name": [JsonChemicalIdAndName.from_dict(_item) for _item in obj["chemical_id_to_name"]] if obj.get("chemical_id_to_name") is not None else None,
            "experiment_types": [JsonExperimentTypeWithBeamtimeInformation.from_dict(_item) for _item in obj["experiment_types"]] if obj.get("experiment_types") is not None else None,
            "filtered_data_sets": [JsonDataSet.from_dict(_item) for _item in obj["filtered_data_sets"]] if obj.get("filtered_data_sets") is not None else None,
            "data_set_statistics": [JsonDataSetStatistics.from_dict(_item) for _item in obj["data_set_statistics"]] if obj.get("data_set_statistics") is not None else None,
            "attributi_values": [JsonAttributoValue.from_dict(_item) for _item in obj["attributi_values"]] if obj.get("attributi_values") is not None else None
        })
        return _obj


