# coding: utf-8

"""
    AMARCORD OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.associated_table import AssociatedTable
from openapi_client.models.json_schema_array import JSONSchemaArray
from openapi_client.models.json_schema_boolean import JSONSchemaBoolean
from openapi_client.models.json_schema_integer import JSONSchemaInteger
from openapi_client.models.json_schema_number import JSONSchemaNumber
from openapi_client.models.json_schema_string import JSONSchemaString
from typing import Optional, Set
from typing_extensions import Self

class JsonAttributo(BaseModel):
    """
    JsonAttributo
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    description: StrictStr
    group: StrictStr
    associated_table: AssociatedTable
    attributo_type_integer: Optional[JSONSchemaInteger] = None
    attributo_type_number: Optional[JSONSchemaNumber] = None
    attributo_type_string: Optional[JSONSchemaString] = None
    attributo_type_array: Optional[JSONSchemaArray] = None
    attributo_type_boolean: Optional[JSONSchemaBoolean] = None
    __properties: ClassVar[List[str]] = ["id", "name", "description", "group", "associated_table", "attributo_type_integer", "attributo_type_number", "attributo_type_string", "attributo_type_array", "attributo_type_boolean"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonAttributo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributo_type_integer
        if self.attributo_type_integer:
            _dict['attributo_type_integer'] = self.attributo_type_integer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attributo_type_number
        if self.attributo_type_number:
            _dict['attributo_type_number'] = self.attributo_type_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attributo_type_string
        if self.attributo_type_string:
            _dict['attributo_type_string'] = self.attributo_type_string.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attributo_type_array
        if self.attributo_type_array:
            _dict['attributo_type_array'] = self.attributo_type_array.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attributo_type_boolean
        if self.attributo_type_boolean:
            _dict['attributo_type_boolean'] = self.attributo_type_boolean.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonAttributo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "group": obj.get("group"),
            "associated_table": obj.get("associated_table"),
            "attributo_type_integer": JSONSchemaInteger.from_dict(obj["attributo_type_integer"]) if obj.get("attributo_type_integer") is not None else None,
            "attributo_type_number": JSONSchemaNumber.from_dict(obj["attributo_type_number"]) if obj.get("attributo_type_number") is not None else None,
            "attributo_type_string": JSONSchemaString.from_dict(obj["attributo_type_string"]) if obj.get("attributo_type_string") is not None else None,
            "attributo_type_array": JSONSchemaArray.from_dict(obj["attributo_type_array"]) if obj.get("attributo_type_array") is not None else None,
            "attributo_type_boolean": JSONSchemaBoolean.from_dict(obj["attributo_type_boolean"]) if obj.get("attributo_type_boolean") is not None else None
        })
        return _obj


